version: 2.1

executors:
  build-executor:
    docker:
      - image: opennms/build-env:11.0.14_9-3.8.4-b8249
        environment:
          MAVEN_OPTS: -Xmx1g
  system-test-executor:
    machine:
      image: ubuntu-2204:2022.07.1
  build-debian-executor:
    docker:
      - image: cimg/openjdk:11.0
        environment:
          MAVEN_OPTS: -Xmx2g
orbs:
  cloudsmith: cloudsmith/cloudsmith@1.0.5
  sign-packages: opennms/sign-packages@2.3.0

workflows:
  build-deploy:
    jobs:
      - build:
          context:
            - OpenNMS Build
          filters:
            tags:
              only:
                - /^v.*/
      - tests:
          requires:
            - build
          context:
            - SonarCloud
          filters:
            tags:
              only:
                - /^v.*/
      - deploy:
          context:
            - OSSRH Principal
            - OpenNMS Build
          requires:
            - tests
          filters:
            tags:
              only:
                - /^v.*/
            branches:
              only:
                - main
                - /release-.*/
      - build-debian:
          context: "OpenNMS Build"
          requires:
            - build
            - tests
          filters:
            tags:
              only:
                - /^v.*/
            branches:
              only:
                - main
                - /release-.*/
      - deploy-packages:
          context: "OpenNMS Build"
          requires:
            - tests
            - build-debian
          filters:
            tags:
              only:
                - /^v.*/
            branches:
              only:
                - main
                - /release-.*/

jobs:
  build:
    executor: build-executor
    steps:
      - sign-packages/install-rpm-dependencies:
          skip_if_forked_pr: true

      - sign-packages/setup-env:
          skip_if_forked_pr: true

      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Compile source and RPMs without tests
          command: |
            mvn -version
            BUILD_NUMBER="0.${CIRCLE_BUILD_NUM}"
            # only build tags as a release
            if [[ -z "<< pipeline.git.tag >>" ]]; then
              MVN_OPTIONS="-Psnapshot"
            else
              if [ "$(grep -c -- -SNAPSHOT pom.xml)" -gt 0 ]; then
                echo 'ERROR: building from a tag, but pom.xml still contains a -SNAPSHOT version!'
                exit 1
              fi
              MVN_OPTIONS="-Prelease -Ddisable.checkstyle=true"
              BUILD_NUMBER=1
            fi
            MVN_OPTIONS="${MVN_OPTIONS} -DbuildNumber=${BUILD_NUMBER}"
            mvn ${MVN_OPTIONS} -DskipITs=true -DskipTests=true -Dbuild.packages clean install
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - persist_to_workspace:
          root: ~/
          paths:
            - .m2
            - project

      - sign-packages/sign-rpms:
          skip_if_forked_pr: true
          gnupg_key: opennms@opennms.org
          packages: assembly/*-rpm/target/rpm/*-plugin-cloud/RPMS/noarch/*.rpm

  tests:
    executor: system-test-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install openssl
          command: |
            sudo apt-get install openssl
      - run:
          name: Force openjdk11
          command: |
            sudo update-alternatives --set java /usr/lib/jvm/java-11-openjdk-amd64/bin/java
      - run:
          name: Run unit and integration tests
          command: |
            MVN_OPTIONS=""
            if [[ -n "<< pipeline.git.tag >>" ]]; then
              MVN_OPTIONS="-Ddisable.checkstyle=true"
            fi
            mvn ${MVN_OPTIONS} -DskipITs=false -DskipTests=false clean org.jacoco:jacoco-maven-plugin:prepare-agent install integration-test org.jacoco:jacoco-maven-plugin:report sonar:sonar -Dsonar.projectKey=OpenNMS_opennms-cloud-plugin
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/junit/ \;
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit

  deploy:
    executor: build-executor
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}

      - sign-packages/setup-env:
          skip_if_forked_pr: true
      - run:
          name: Deploy to Maven
          command: |
            mvn -Prelease -s .circleci/.circleci.settings.xml -Ddisable.checkstyle=true -DskipTests -Dmaven.verify.skip=true -Dmaven.install.skip=true deploy

  build-debian:
    executor: build-debian-executor

    steps:
      - attach_workspace:
          at: ~/

      - sign-packages/install-deb-dependencies:
          skip_if_forked_pr: true
          use_sudo: true
      - sign-packages/setup-env:
          skip_if_forked_pr: true

      - restore_cache:
          keys:
            # Use a separate cache, since the the other build image runs as root
            - v4-deb-dependencies-{{ checksum "pom.xml" }}
            - v4-deb-dependencies-

      - run:
          name: Install fakeroot
          command: sudo apt install -y fakeroot 

      - run:
          name: Build Debian packages
          command: |
            BUILD_NUMBER="0.${CIRCLE_BUILD_NUM}"
            # only build tags as a release
            if [[ -z "<< pipeline.git.tag >>" ]]; then
              MVN_OPTIONS="-Psnapshot"
            else
              MVN_OPTIONS="-Prelease -Ddisable.checkstyle=true"
              BUILD_NUMBER=1
            fi
            MVN_OPTIONS="${MVN_OPTIONS} -DbuildNumber=${BUILD_NUMBER}"
            mvn install ${MVN_OPTIONS} --projects org.opennms.plugins.cloud.assembly:org.opennms.plugins.cloud.assembly.opennms.deb,org.opennms.plugins.cloud.assembly:org.opennms.plugins.cloud.assembly.sentinel.deb --also-make -DskipTests=true -Dbuild.packages

      - run:
          name: Remove old artifacts to keep workspace size down
          command: .circleci/scripts/clean-dir.sh "$HOME/.m2/repository"

      - save_cache:
          paths:
            - ~/.m2
          key: v4-deb-dependencies-{{ checksum "pom.xml" }}

      - sign-packages/sign-debs:
          skip_if_forked_pr: true
          gnupg_key: opennms@opennms.org
          packages: assembly/*-deb/target/*.deb

      - run:
          name: Gather artifacts
          command: |
            mkdir -p ~/dist/
            cp assembly/opennms-deb/target/opennms-plugin-cloud_*.deb ~/dist/
            cp assembly/sentinel-deb/target/sentinel-plugin-cloud_*.deb ~/dist/

      - store_artifacts:
          path: ~/dist
          destination: dist

      - persist_to_workspace:
          root: ~/
          paths:
            - project/assembly/

  deploy-packages:
    executor: cloudsmith/default
    resource_class: small
    steps:
      - attach_workspace:
          at: ~/

      - cloudsmith/ensure-api-key
      - cloudsmith/install-cli

      - run:
          name: Push packages to CloudSmith
          command: .circleci/scripts/publish-cloudsmith.sh
